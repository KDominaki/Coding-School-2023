@page "/ledger"

@using Session30.Models;
@using Session30.Web.Shared;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime


<PageTitle>Ledger</PageTitle>
<h3 class="display-3">Ledger</h3>

<style>
    body {
        background-color: #FAF8F1
    }

    .main-btn {
        margin-top: 15px;
        margin-bottom: 15px;
    }

    h3 {
        border-bottom: double;
    }
</style>

@if (isLoading)
{
        <div class="spinner-border text-success" role="status">
            <span class="sr-only"></span>
        </div>
    <p style="color:purple">Loading...</p>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Month</th>
                <th>Year</th>
                <th>Total</th>
               
            </tr>
        </thead>
        <tbody>
            @foreach (var ledger in ledgers)
            {
                <tr>
                    <td>@ledger.Month</td>
                    <td>@ledger.Year</td>
                    <td>@ledger.Total</td>
                    
                </tr>
            }
        </tbody>
    </table>
}

@code{
    private List<TransactionListDto> transactions = new();
    private List<EmployeeListDto> employeeList = new();
    public List<Ledger> ledgers = new List<Ledger>();
    private int _month = 0;
    private int _year = 0001; 

    bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();
        isLoading = false;
    }
    private async Task LoadItemsFromServer()
    {
        transactions = await httpClient.GetFromJsonAsync<List<TransactionListDto>>("transaction");
        employeeList = await httpClient.GetFromJsonAsync<List<EmployeeListDto>>("employee");

        foreach(var transaction in transactions)
        {
            if(transaction.Date.Month != _month)
            {
                _month = transaction.Date.Month;
                _year = transaction.Date.Year;
                Ledger newLedger = new Ledger(_month, _year);
                newLedger.TotalCalc(transactions, employeeList);
                ledgers.Add(newLedger);
            }
            
            
        }
    }


    
}