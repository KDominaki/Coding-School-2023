@page "/itemlist/edit/{Id:int?}"
@using Session30.Models.Enums;
@using Session30.Web.Shared;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<PageTitle>Item Edit</PageTitle>

<h3 class="display-3">Items</h3>
<h4>Create/Edit</h4>

<style>
    body {
        background-color: #FAF8F1
    }

    h3 {
        font-weight: bold;
    }
</style>

@if (Item == null)
{
    <p>Loading ...</p>

}
else
{

    <div class="row">
        <div class="col-md-6">
            <label class="form-label">Description</label>
            <textarea class="form-control" @bind="@Item.Description" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Item Type</label>
            <select class="form-control" @bind="Item.ItemType">
                @foreach (var item in Enum.GetValues(typeof(ItemType))) {
                    <option value="@item">@item</option>
                }
            </select>
        </div>
        <div class="col-md-6">
            <label class="form-label">Cost</label>
            <input class="form-control" @bind="@Item.Cost" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Price</label>
            <input class="form-control" @bind="@Item.Price" />
        </div>

    </div>

    <div class="row mt-2">
        <div class="col">
            <button class="btn btn-success" @onclick="OnSave">Save</button>
            <button class="btn btn-danger" @onclick="OnCancel">Cancel</button>
        </div>

    </div>

}

@code {
    [Parameter] public int? Id { get; set; }
    ItemEditDto Item { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id == null)
        {
            Item = new();
        }
        else
        {
            Item = await httpClient.GetFromJsonAsync<ItemEditDto>($"item/{Id}");
        }
    }

    private void OnCancel()
    {
        navigationManager.NavigateTo("itemlist");
    }

    private async Task OnSave()
    {
        try
        {
            HttpResponseMessage? response = null;
            if (Id == null)
            {
                response = await httpClient.PostAsJsonAsync("item", Item);
            }
            else
            {
                response = await httpClient.PutAsJsonAsync("item", Item);
            }

            response.EnsureSuccessStatusCode();
            navigationManager.NavigateTo("itemlist");
        }
        catch (Exception)
        {
            var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Ops something went wrong. Make sure you filled the form correctly");
        }
        
    }

}
