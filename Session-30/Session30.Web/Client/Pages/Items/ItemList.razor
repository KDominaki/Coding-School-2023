@page "/itemlist"

@using Session30.Web.Shared;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime


<PageTitle>Items</PageTitle>
<h3 class="display-3">Items</h3>

<style>
    body {
        background-color: #FAF8F1
    }

    .main-btn {
        margin-top: 15px;
        margin-bottom: 15px;
    }

    h3 {
        border-bottom: double;
    }
</style>

@if (isLoading)
{
    <div class="spinner-border text-success" role="status">
        <span class="sr-only"></span>
    </div>
    <p style="color:purple">Loading...</p>
}
else
{
    <button class="btn btn-success btn-lg main-btn" @onclick="CreateItem">Create New +</button>
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Code</th>
                <th>Description</th>
                <th>Item Type</th>
                <th>Cost</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in itemList)
            {
                <tr>
                    <td>@item.Code</td>
                    <td>@item.Description</td>
                    <td>@item.ItemType</td>
                    <td>@item.Cost</td>
                    <tb>@item.Price</tb>
                    <td>
                        <button class="btn btn-primary" @onclick="()=> EditItem(item)">Edit</button>
                        <button class="btn btn-danger" @onclick="()=> DeleteItem(item)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}




@code {
    private List<ItemListDto> itemList = new();

    bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer()
    {
        itemList = await httpClient.GetFromJsonAsync<List<ItemListDto>>("item");
    }

    private void CreateItem()
    {
        navigationManager.NavigateTo("itemlist/edit");
    }

    private void EditItem(ItemListDto item)
    {
        navigationManager.NavigateTo($"itemlist/edit/{item.Id}");
    }

    private async Task DeleteItem(ItemListDto item)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Item. Are you sure?");
        if (confirm)
        {
            var response = await httpClient.DeleteAsync($"item/{item.Id}");
            response.EnsureSuccessStatusCode();
            await LoadItemsFromServer();
        }
    }
}