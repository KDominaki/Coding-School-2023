@page "/employeelist/edit/{Id:int?}"
@using Session30.Models.Enums;
@using Session30.Web.Shared;
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<PageTitle>Employee Edit</PageTitle>

<h3 class="display-3">Employees</h3>
<h4>Create/Edit</h4>

<style>
    body {
        background-color: #FAF8F1
    }

    h3 {
        font-weight: bold;
    }
</style>

@if (Employee == null)
{
    <p>Loading ...</p>

}
else
{

    <div class="row">
        <div class="col-md-6">
            <label class="form-label">Name</label>
            <input class="form-control" @bind="@Employee.Name" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Surname</label>
            <input class="form-control" @bind="@Employee.Surname" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Employee Type</label>
            <select class="form-control" @bind="Employee.EmployeeType">
                @foreach (var item in Enum.GetValues(typeof(EmployeeType)))
                {
                    <option value="@item">@item</option>
                }
            </select>
        </div>
        <div class="col-md-6">
            <label class="form-label">Sallary</label>
            <input class="form-control" @bind="@Employee.SallaryPerMonth" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Hire Date Start</label>
            <input class="form-control" @bind="@Employee.HireDateStart" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Hire Date End</label>
            <input class="form-control" @bind="@Employee.HireDateEnd" />
        </div>

    </div>

    <div class="row mt-2">
        <div class="col">
            <button class="btn btn-success" @onclick="OnSave">Save</button>
            <button class="btn btn-danger" @onclick="OnCancel">Cancel</button>
        </div>

    </div>

}

@code {
    [Parameter] public int? Id { get; set; }
    EmployeeEditDto Employee { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id == null)
        {
            Employee = new();
        }
        else
        {
            Employee = await httpClient.GetFromJsonAsync<EmployeeEditDto>($"employee/{Id}");
        }
    }

    private void OnCancel()
    {
        navigationManager.NavigateTo("employeelist");
    }

    private async Task OnSave()
    {

    HttpResponseMessage? response = null;
        if (Id == null)
        {
            response = await httpClient.PostAsJsonAsync("employee", Employee);
        }
        else
        {
            response = await httpClient.PutAsJsonAsync("employee", Employee);
        }

        response.EnsureSuccessStatusCode();
        navigationManager.NavigateTo("employeelist");
    }

}
