@page "/engineerlist"
@inject HttpClient httpClient
@using CarServiceCenter.Web.Blazor.Shared;
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<PageTitle>Engineers</PageTitle>

<h3 class="display-3">Engineers</h3>

<style>
    body {
        background-color: #FAF8F1
    }

    .main-btn {
        margin-top: 15px;
        margin-bottom: 15px;
    }
    h3{
        border-bottom:double;
    }
</style>


@if (isLoading) {

    <div class="spinner-border text-danger" role="status">
        <span class="sr-only"></span>
    </div>
    <p style="color:purple">Loading...</p>

} else {
    <button class="btn btn-success btn-lg main-btn" @onclick="CreateItem">Create New +</button>
          <table class="table table-striped table-hover">
              <thead>
                  <tr>
                      <th>Name</th>
                      <th>Surname</th>
                      <th>Salary</th>
                      <th>Manager</th>
                      <th>Actions</th>
                  </tr>
              </thead>
              <tbody>
            @foreach (var engineer in engineerList) {
                        <tr>
                            <td>@engineer.Name</td>
                            <td>@engineer.Surname</td>
                            <td>@engineer.SalaryPerMonth</td>
                            <td>@engineer.ManagerSurname</td>                  
                            <td>
                                <button class="btn btn-primary" @onclick="()=> EditItem(engineer)">Edit</button>
                                <button class="btn btn-danger" @onclick="()=> DeleteItem(engineer)">Delete</button>
                            </td>
                        </tr>
            }
              </tbody>
          </table>
}

@code {
    private List<EngineerListDto> engineerList = new();

    bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync() {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer() {
        engineerList = await httpClient.GetFromJsonAsync<List<EngineerListDto>>("engineer");
    }

    private void CreateItem() {
        navigationManager.NavigateTo("engineerlist/edit");
    }

    private void EditItem(EngineerListDto engineer) {
        navigationManager.NavigateTo($"engineerlist/edit/{engineer.Id}");
    }

    private async Task DeleteItem(EngineerListDto engineer) {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Engineer. Are you sure?");
        if (confirm) {
            var response = await httpClient.DeleteAsync($"engineer/{engineer.Id}");
            response.EnsureSuccessStatusCode();
            await LoadItemsFromServer();
        }
    }
}
