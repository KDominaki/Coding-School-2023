@page "/servicetasklist"
@using CarServiceCenter.Web.Blazor.Shared.ServiceTask;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<PageTitle>Service Tasks</PageTitle>

<h3 class="display-3">Service Tasks</h3>

<style>
    body {
        background-color: #FAF8F1
    }

    .main-btn {
        margin-top: 15px;
         margin-bottom: 15px;
    }
    h3{
        border-bottom:double;
    }
</style>


@if (isLoading) {

    <div class="spinner-border text-info" role="status">
        <span class="sr-only"></span>
    </div>
    <p style="color:purple">Loading...</p>

} else {
    <button class="btn btn-success btn-lg main-btn" @onclick="CreateItem">Create New +</button>
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Code</th>
                <th>Description</th>
                <th>Hours</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var serviceTask in serviceTaskList) {
                <tr>
                    <td>@serviceTask.Code</td>
                    <td>@serviceTask.Description</td>
                    <td>@serviceTask.Hours</td>
                    <td>
                        <button class="btn btn-primary" @onclick="()=> EditItem(serviceTask)">Edit</button>
                        <button class="btn btn-danger" @onclick="()=> DeleteItem(serviceTask)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    
}

@code {

    private List<ServiceTaskListDto> serviceTaskList = new();

    bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync() {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer() {
        serviceTaskList = await httpClient.GetFromJsonAsync<List<ServiceTaskListDto>>("serviceTask");
    }

    private void CreateItem() {
        navigationManager.NavigateTo("servicetasklist/edit");
    }

    private void EditItem(ServiceTaskListDto serviceTask) {
        navigationManager.NavigateTo($"servicetasklist/edit/{serviceTask.Id}");
    }

    private async Task DeleteItem(ServiceTaskListDto serviceTask) {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Item. Are you sure?");
        if (confirm) {
            var response = await httpClient.DeleteAsync($"serviceTask/{serviceTask.Id}");
            response.EnsureSuccessStatusCode();
            await LoadItemsFromServer();
        }
    }

}
