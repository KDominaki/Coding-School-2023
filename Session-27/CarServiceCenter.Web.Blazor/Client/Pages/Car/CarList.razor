@page "/carlist"
@using CarServiceCenter.Web.Blazor.Shared.Car;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<PageTitle>Cars</PageTitle>

<h3 class="display-3">Cars</h3>

<style>
    body {
        background-color: #FAF8F1
    }
    .main-btn{
        margin-top: 15px;
        margin-bottom: 15px;
    }
    h3{
        border-bottom:double;  
    }
</style>

@if(isLoading)
{
    <div class="spinner-border text-primary" role="status">
  <span class="sr-only"></span>
</div>
    <p style="color:purple">Loading...</p>
}
else
{
    <button class="btn btn-success btn-lg main-btn" @onclick="CreateItem">Create New +</button>
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Brand</th>
                <th>Model</th>
                <th>Car Registration Number</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var car in carList)
            {
                <tr>
                    <td>@car.Brand</td>
                    <td>@car.Model</td>
                    <td>@car.CarRegistrationNumber</td>
                    <td>
                        <button class="btn btn-primary" @onclick="()=>EditItem(car)">Edit</button>
                        <button class="btn btn-danger" @onclick="()=>DeleteItem(car)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<CarListDto> carList = new();
    bool isLoading {get; set;}=true;

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer()
    {
        carList = await httpClient.GetFromJsonAsync<List<CarListDto>>("car");
    }

    private void CreateItem()
    {
        navigationManager.NavigateTo("carlist/edit");
    }
    private void EditItem(CarListDto car)
    {
        navigationManager.NavigateTo($"carlist/edit/{car.Id}");
    }
    private async Task DeleteItem(CarListDto car)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Item. Are you sure?");
        if(confirm)
        {
            var response = await httpClient.DeleteAsync($"car/{car.Id}");
            response.EnsureSuccessStatusCode();
            await LoadItemsFromServer();
        }
    }
}